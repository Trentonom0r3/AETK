# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.2.0
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _pyfx
else:
    import _pyfx

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


class MemorySuite(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _pyfx.MemorySuite_swiginit(self, _pyfx.new_MemorySuite())

    def NewMemHandle(self, what, size, flags):
        return _pyfx.MemorySuite_NewMemHandle(self, what, size, flags)

    def FreeMemHandle(self, memHandle):
        return _pyfx.MemorySuite_FreeMemHandle(self, memHandle)

    def LockMemHandle(self, memHandle, ptrToPtr):
        return _pyfx.MemorySuite_LockMemHandle(self, memHandle, ptrToPtr)

    def UnlockMemHandle(self, memHandle):
        return _pyfx.MemorySuite_UnlockMemHandle(self, memHandle)

    def GetMemHandleSize(self, memHandle):
        return _pyfx.MemorySuite_GetMemHandleSize(self, memHandle)

    def ResizeMemHandle(self, what, newSize, memHandle):
        return _pyfx.MemorySuite_ResizeMemHandle(self, what, newSize, memHandle)

    def SetMemReportingOn(self, turnOn):
        return _pyfx.MemorySuite_SetMemReportingOn(self, turnOn)

    def GetMemStats(self):
        return _pyfx.MemorySuite_GetMemStats(self)
    __swig_destroy__ = _pyfx.delete_MemorySuite

# Register MemorySuite in _pyfx:
_pyfx.MemorySuite_swigregister(MemorySuite)

def ConvertUTF16ToUTF8(utf16String):
    return _pyfx.ConvertUTF16ToUTF8(utf16String)

def ConvertUTF8ToUTF16UnSafe(utf8String):
    return _pyfx.ConvertUTF8ToUTF16UnSafe(utf8String)

def ConvertUTF8ToUTF16(utf8String):
    return _pyfx.ConvertUTF8ToUTF16(utf8String)

def memHandleToString(memHandle):
    return _pyfx.memHandleToString(memHandle)
class ProjSuite(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _pyfx.ProjSuite_swiginit(self, _pyfx.new_ProjSuite())

    def GetNumProjects(self):
        return _pyfx.ProjSuite_GetNumProjects(self)

    def GetProjectByIndex(self, projIndex):
        return _pyfx.ProjSuite_GetProjectByIndex(self, projIndex)

    def GetProjectName(self, project):
        return _pyfx.ProjSuite_GetProjectName(self, project)

    def GetProjectPath(self, project):
        return _pyfx.ProjSuite_GetProjectPath(self, project)

    def GetProjectRootFolder(self, project):
        return _pyfx.ProjSuite_GetProjectRootFolder(self, project)

    def SaveProjectToPath(self, project, path):
        return _pyfx.ProjSuite_SaveProjectToPath(self, project, path)

    def GetProjectTimeDisplay(self, project):
        return _pyfx.ProjSuite_GetProjectTimeDisplay(self, project)

    def SetProjectTimeDisplay(self, project, timeDisplay):
        return _pyfx.ProjSuite_SetProjectTimeDisplay(self, project, timeDisplay)

    def ProjectIsDirty(self, project):
        return _pyfx.ProjSuite_ProjectIsDirty(self, project)

    def SaveProjectAs(self, project, path):
        return _pyfx.ProjSuite_SaveProjectAs(self, project, path)

    def NewProject(self):
        return _pyfx.ProjSuite_NewProject(self)

    def OpenProjectFromPath(self, path):
        return _pyfx.ProjSuite_OpenProjectFromPath(self, path)

    def GetProjectBitDepth(self, project):
        return _pyfx.ProjSuite_GetProjectBitDepth(self, project)

    def SetProjectBitDepth(self, project, bitDepth):
        return _pyfx.ProjSuite_SetProjectBitDepth(self, project, bitDepth)
    __swig_destroy__ = _pyfx.delete_ProjSuite

# Register ProjSuite in _pyfx:
_pyfx.ProjSuite_swigregister(ProjSuite)
class ItemSuite(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _pyfx.ItemSuite_swiginit(self, _pyfx.new_ItemSuite())

    def GetFirstProjItem(self, project):
        return _pyfx.ItemSuite_GetFirstProjItem(self, project)

    def GetNextProjItem(self, project, item):
        return _pyfx.ItemSuite_GetNextProjItem(self, project, item)

    def GetActiveItem(self):
        return _pyfx.ItemSuite_GetActiveItem(self)

    def IsItemSelected(self, item):
        return _pyfx.ItemSuite_IsItemSelected(self, item)

    def SelectItem(self, item, select, deselectOthers):
        return _pyfx.ItemSuite_SelectItem(self, item, select, deselectOthers)

    def GetItemType(self, item):
        return _pyfx.ItemSuite_GetItemType(self, item)

    def GetTypeName(self, itemType):
        return _pyfx.ItemSuite_GetTypeName(self, itemType)

    def GetItemName(self, item):
        return _pyfx.ItemSuite_GetItemName(self, item)

    def SetItemName(self, item, name):
        return _pyfx.ItemSuite_SetItemName(self, item, name)

    def GetItemID(self, item):
        return _pyfx.ItemSuite_GetItemID(self, item)

    def GetItemFlags(self, item):
        return _pyfx.ItemSuite_GetItemFlags(self, item)

    def SetItemUseProxy(self, item, useProxy):
        return _pyfx.ItemSuite_SetItemUseProxy(self, item, useProxy)

    def GetItemParentFolder(self, item):
        return _pyfx.ItemSuite_GetItemParentFolder(self, item)

    def SetItemParentFolder(self, item, parentFolder):
        return _pyfx.ItemSuite_SetItemParentFolder(self, item, parentFolder)

    def GetItemDuration(self, item):
        return _pyfx.ItemSuite_GetItemDuration(self, item)

    def GetItemCurrentTime(self, item):
        return _pyfx.ItemSuite_GetItemCurrentTime(self, item)

    def GetItemDimensions(self, item):
        return _pyfx.ItemSuite_GetItemDimensions(self, item)

    def GetItemPixelAspectRatio(self, item):
        return _pyfx.ItemSuite_GetItemPixelAspectRatio(self, item)

    def DeleteItem(self, item):
        return _pyfx.ItemSuite_DeleteItem(self, item)

    def CreateNewFolder(self, name, parentFolder):
        return _pyfx.ItemSuite_CreateNewFolder(self, name, parentFolder)

    def SetItemCurrentTime(self, item, newTime):
        return _pyfx.ItemSuite_SetItemCurrentTime(self, item, newTime)

    def GetItemComment(self, item):
        return _pyfx.ItemSuite_GetItemComment(self, item)

    def SetItemComment(self, item, comment):
        return _pyfx.ItemSuite_SetItemComment(self, item, comment)

    def GetItemLabel(self, item):
        return _pyfx.ItemSuite_GetItemLabel(self, item)

    def SetItemLabel(self, item, label):
        return _pyfx.ItemSuite_SetItemLabel(self, item, label)

    def GetItemMRUView(self, item):
        return _pyfx.ItemSuite_GetItemMRUView(self, item)

    def GetItemViewPlaybackTime(self, itemView, isCurrentlyPreviewing):
        return _pyfx.ItemSuite_GetItemViewPlaybackTime(self, itemView, isCurrentlyPreviewing)
    __swig_destroy__ = _pyfx.delete_ItemSuite

# Register ItemSuite in _pyfx:
_pyfx.ItemSuite_swigregister(ItemSuite)
class SoundDataSuite(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _pyfx.SoundDataSuite_swiginit(self, _pyfx.new_SoundDataSuite())

    def NewSoundData(self, soundFormat):
        return _pyfx.SoundDataSuite_NewSoundData(self, soundFormat)

    def GetSoundDataFormat(self, soundData):
        return _pyfx.SoundDataSuite_GetSoundDataFormat(self, soundData)

    def LockSoundDataSamples(self, soundData, samples):
        return _pyfx.SoundDataSuite_LockSoundDataSamples(self, soundData, samples)

    def UnlockSoundDataSamples(self, soundData):
        return _pyfx.SoundDataSuite_UnlockSoundDataSamples(self, soundData)

    def GetNumSamples(self, soundData):
        return _pyfx.SoundDataSuite_GetNumSamples(self, soundData)
    __swig_destroy__ = _pyfx.delete_SoundDataSuite

# Register SoundDataSuite in _pyfx:
_pyfx.SoundDataSuite_swigregister(SoundDataSuite)
class CompSuite(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _pyfx.CompSuite_swiginit(self, _pyfx.new_CompSuite())

    def GetCompFromItem(self, item):
        return _pyfx.CompSuite_GetCompFromItem(self, item)

    def GetItemFromComp(self, comp):
        return _pyfx.CompSuite_GetItemFromComp(self, comp)

    def GetCompDownsampleFactor(self, comp):
        return _pyfx.CompSuite_GetCompDownsampleFactor(self, comp)

    def SetCompDownsampleFactor(self, comp, factor):
        return _pyfx.CompSuite_SetCompDownsampleFactor(self, comp, factor)

    def GetCompBGColor(self, comp):
        return _pyfx.CompSuite_GetCompBGColor(self, comp)

    def SetCompBGColor(self, comp, color):
        return _pyfx.CompSuite_SetCompBGColor(self, comp, color)

    def GetCompFlags(self, comp):
        return _pyfx.CompSuite_GetCompFlags(self, comp)

    def GetShowLayerNameOrSourceName(self, comp):
        return _pyfx.CompSuite_GetShowLayerNameOrSourceName(self, comp)

    def SetShowLayerNameOrSourceName(self, comp, showLayerName):
        return _pyfx.CompSuite_SetShowLayerNameOrSourceName(self, comp, showLayerName)

    def GetShowBlendModes(self, comp):
        return _pyfx.CompSuite_GetShowBlendModes(self, comp)

    def SetShowBlendModes(self, comp, showBlendModes):
        return _pyfx.CompSuite_SetShowBlendModes(self, comp, showBlendModes)

    def GetCompFramerate(self, comp):
        return _pyfx.CompSuite_GetCompFramerate(self, comp)

    def SetCompFrameRate(self, comp, fps):
        return _pyfx.CompSuite_SetCompFrameRate(self, comp, fps)

    def GetCompShutterAnglePhase(self, comp):
        return _pyfx.CompSuite_GetCompShutterAnglePhase(self, comp)

    def GetCompShutterFrameRange(self, comp, compTime):
        return _pyfx.CompSuite_GetCompShutterFrameRange(self, comp, compTime)

    def GetCompSuggestedMotionBlurSamples(self, comp):
        return _pyfx.CompSuite_GetCompSuggestedMotionBlurSamples(self, comp)

    def SetCompSuggestedMotionBlurSamples(self, comp, samples):
        return _pyfx.CompSuite_SetCompSuggestedMotionBlurSamples(self, comp, samples)

    def GetCompMotionBlurAdaptiveSampleLimit(self, comp):
        return _pyfx.CompSuite_GetCompMotionBlurAdaptiveSampleLimit(self, comp)

    def SetCompMotionBlurAdaptiveSampleLimit(self, comp, samples):
        return _pyfx.CompSuite_SetCompMotionBlurAdaptiveSampleLimit(self, comp, samples)

    def GetCompWorkAreaStart(self, comp):
        return _pyfx.CompSuite_GetCompWorkAreaStart(self, comp)

    def GetCompWorkAreaDuration(self, comp):
        return _pyfx.CompSuite_GetCompWorkAreaDuration(self, comp)

    def SetCompWorkAreaStartAndDuration(self, comp, workAreaStart, workAreaDuration):
        return _pyfx.CompSuite_SetCompWorkAreaStartAndDuration(self, comp, workAreaStart, workAreaDuration)

    def CreateSolidInComp(self, comp, name, width, height, color, duration):
        return _pyfx.CompSuite_CreateSolidInComp(self, comp, name, width, height, color, duration)

    def CreateCameraInComp(self, comp, name, centerPoint):
        return _pyfx.CompSuite_CreateCameraInComp(self, comp, name, centerPoint)

    def CreateLightInComp(self, comp, name, centerPoint):
        return _pyfx.CompSuite_CreateLightInComp(self, comp, name, centerPoint)

    def CreateComp(self, parentFolder, name, width, height, pixelAspectRatio, duration, framerate):
        return _pyfx.CompSuite_CreateComp(self, parentFolder, name, width, height, pixelAspectRatio, duration, framerate)

    def GetNewCollectionFromCompSelection(self, pluginId, comp):
        return _pyfx.CompSuite_GetNewCollectionFromCompSelection(self, pluginId, comp)

    def GetCompDisplayStartTime(self, comp):
        return _pyfx.CompSuite_GetCompDisplayStartTime(self, comp)

    def SetCompDisplayStartTime(self, comp, startTime):
        return _pyfx.CompSuite_SetCompDisplayStartTime(self, comp, startTime)

    def SetCompDuration(self, comp, duration):
        return _pyfx.CompSuite_SetCompDuration(self, comp, duration)

    def SetCompDimensions(self, comp, width, height):
        return _pyfx.CompSuite_SetCompDimensions(self, comp, width, height)

    def SetCompPixelAspectRatio(self, comp, pixelAspectRatio):
        return _pyfx.CompSuite_SetCompPixelAspectRatio(self, comp, pixelAspectRatio)

    def CreateTextLayerInComp(self, comp, newLayer=True):
        return _pyfx.CompSuite_CreateTextLayerInComp(self, comp, newLayer)

    def CreateBoxTextLayerInComp(self, comp, boxDimensions, newLayer=True):
        return _pyfx.CompSuite_CreateBoxTextLayerInComp(self, comp, boxDimensions, newLayer)

    def CreateNullInComp(self, comp, name, duration):
        return _pyfx.CompSuite_CreateNullInComp(self, comp, name, duration)

    def DuplicateComp(self, comp):
        return _pyfx.CompSuite_DuplicateComp(self, comp)

    def GetCompFrameDuration(self, comp):
        return _pyfx.CompSuite_GetCompFrameDuration(self, comp)

    def GetMostRecentlyUsedComp(self):
        return _pyfx.CompSuite_GetMostRecentlyUsedComp(self)

    def CreateVectorLayerInComp(self, comp):
        return _pyfx.CompSuite_CreateVectorLayerInComp(self, comp)

    def GetNewCompMarkerStream(self, parentComp):
        return _pyfx.CompSuite_GetNewCompMarkerStream(self, parentComp)

    def GetCompDisplayDropFrame(self, comp):
        return _pyfx.CompSuite_GetCompDisplayDropFrame(self, comp)

    def SetCompDisplayDropFrame(self, comp, dropFrame):
        return _pyfx.CompSuite_SetCompDisplayDropFrame(self, comp, dropFrame)

    def ReorderCompSelection(self, comp, index):
        return _pyfx.CompSuite_ReorderCompSelection(self, comp, index)
    __swig_destroy__ = _pyfx.delete_CompSuite

# Register CompSuite in _pyfx:
_pyfx.CompSuite_swigregister(CompSuite)
class LayerSuite(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _pyfx.LayerSuite_swiginit(self, _pyfx.new_LayerSuite())

    def GetCompNumLayers(self, comp):
        return _pyfx.LayerSuite_GetCompNumLayers(self, comp)

    def GetCompLayerByIndex(self, comp, layerIndex):
        return _pyfx.LayerSuite_GetCompLayerByIndex(self, comp, layerIndex)

    def GetActiveLayer(self):
        return _pyfx.LayerSuite_GetActiveLayer(self)

    def GetLayerIndex(self, layer):
        return _pyfx.LayerSuite_GetLayerIndex(self, layer)

    def GetLayerSourceItem(self, layer):
        return _pyfx.LayerSuite_GetLayerSourceItem(self, layer)

    def GetLayerSourceItemID(self, layer):
        return _pyfx.LayerSuite_GetLayerSourceItemID(self, layer)

    def GetLayerParentComp(self, layer):
        return _pyfx.LayerSuite_GetLayerParentComp(self, layer)

    def GetLayerName(self, layer):
        return _pyfx.LayerSuite_GetLayerName(self, layer)

    def GetLayerQuality(self, layer):
        return _pyfx.LayerSuite_GetLayerQuality(self, layer)

    def SetLayerQuality(self, layer, quality):
        return _pyfx.LayerSuite_SetLayerQuality(self, layer, quality)

    def GetLayerFlags(self, layer):
        return _pyfx.LayerSuite_GetLayerFlags(self, layer)

    def SetLayerFlag(self, layer, singleFlag, value):
        return _pyfx.LayerSuite_SetLayerFlag(self, layer, singleFlag, value)

    def IsLayerVideoReallyOn(self, layer):
        return _pyfx.LayerSuite_IsLayerVideoReallyOn(self, layer)

    def IsLayerAudioReallyOn(self, layer):
        return _pyfx.LayerSuite_IsLayerAudioReallyOn(self, layer)

    def GetLayerCurrentTime(self, layer, timeMode):
        return _pyfx.LayerSuite_GetLayerCurrentTime(self, layer, timeMode)

    def GetLayerInPoint(self, layer, timeMode):
        return _pyfx.LayerSuite_GetLayerInPoint(self, layer, timeMode)

    def GetLayerDuration(self, layer, timeMode):
        return _pyfx.LayerSuite_GetLayerDuration(self, layer, timeMode)

    def SetLayerInPointAndDuration(self, layer, timeMode, inPoint, duration):
        return _pyfx.LayerSuite_SetLayerInPointAndDuration(self, layer, timeMode, inPoint, duration)

    def GetLayerOffset(self, layer):
        return _pyfx.LayerSuite_GetLayerOffset(self, layer)

    def SetLayerOffset(self, layer, offset):
        return _pyfx.LayerSuite_SetLayerOffset(self, layer, offset)

    def GetLayerStretch(self, layer):
        return _pyfx.LayerSuite_GetLayerStretch(self, layer)

    def SetLayerStretch(self, layer, stretch):
        return _pyfx.LayerSuite_SetLayerStretch(self, layer, stretch)

    def GetLayerTransferMode(self, layer):
        return _pyfx.LayerSuite_GetLayerTransferMode(self, layer)

    def SetLayerTransferMode(self, layer, flags, trackMatte):
        return _pyfx.LayerSuite_SetLayerTransferMode(self, layer, flags, trackMatte)

    def IsAddLayerValid(self, itemToAdd, intoComp):
        return _pyfx.LayerSuite_IsAddLayerValid(self, itemToAdd, intoComp)

    def AddLayer(self, itemToAdd, intoComp):
        return _pyfx.LayerSuite_AddLayer(self, itemToAdd, intoComp)

    def ReorderLayer(self, layer, layerIndex):
        return _pyfx.LayerSuite_ReorderLayer(self, layer, layerIndex)

    def GetLayerMaskedBounds(self, layer, timeMode, time):
        return _pyfx.LayerSuite_GetLayerMaskedBounds(self, layer, timeMode, time)

    def GetLayerObjectType(self, layer):
        return _pyfx.LayerSuite_GetLayerObjectType(self, layer)

    def IsLayer3D(self, layer):
        return _pyfx.LayerSuite_IsLayer3D(self, layer)

    def IsLayer2D(self, layer):
        return _pyfx.LayerSuite_IsLayer2D(self, layer)

    def IsVideoActive(self, layer, timeMode, time):
        return _pyfx.LayerSuite_IsVideoActive(self, layer, timeMode, time)

    def IsLayerUsedAsTrackMatte(self, layer, fillMustBeActive):
        return _pyfx.LayerSuite_IsLayerUsedAsTrackMatte(self, layer, fillMustBeActive)

    def DoesLayerHaveTrackMatte(self, layer):
        return _pyfx.LayerSuite_DoesLayerHaveTrackMatte(self, layer)

    def ConvertCompToLayerTime(self, layer, compTime):
        return _pyfx.LayerSuite_ConvertCompToLayerTime(self, layer, compTime)

    def ConvertLayerToCompTime(self, layer, layerTime):
        return _pyfx.LayerSuite_ConvertLayerToCompTime(self, layer, layerTime)

    def GetLayerDancingRandValue(self, layer, compTime):
        return _pyfx.LayerSuite_GetLayerDancingRandValue(self, layer, compTime)

    def GetLayerID(self, layer):
        return _pyfx.LayerSuite_GetLayerID(self, layer)

    def GetLayerToWorldXform(self, layer, compTime):
        return _pyfx.LayerSuite_GetLayerToWorldXform(self, layer, compTime)

    def GetLayerToWorldXformFromView(self, layer, viewTime, compTime):
        return _pyfx.LayerSuite_GetLayerToWorldXformFromView(self, layer, viewTime, compTime)

    def SetLayerName(self, layer, newName):
        return _pyfx.LayerSuite_SetLayerName(self, layer, newName)

    def GetLayerParent(self, layer):
        return _pyfx.LayerSuite_GetLayerParent(self, layer)

    def SetLayerParent(self, layer, parentLayer):
        return _pyfx.LayerSuite_SetLayerParent(self, layer, parentLayer)

    def DeleteLayer(self, layer):
        return _pyfx.LayerSuite_DeleteLayer(self, layer)

    def DuplicateLayer(self, origLayer):
        return _pyfx.LayerSuite_DuplicateLayer(self, origLayer)

    def GetLayerFromLayerID(self, parentComp, id):
        return _pyfx.LayerSuite_GetLayerFromLayerID(self, parentComp, id)

    def GetLayerLabel(self, layer):
        return _pyfx.LayerSuite_GetLayerLabel(self, layer)

    def SetLayerLabel(self, layer, label):
        return _pyfx.LayerSuite_SetLayerLabel(self, layer, label)

    def GetLayerSamplingQuality(self, layer):
        return _pyfx.LayerSuite_GetLayerSamplingQuality(self, layer)

    def SetLayerSamplingQuality(self, layer, quality):
        return _pyfx.LayerSuite_SetLayerSamplingQuality(self, layer, quality)

    def GetTrackMatteLayer(self, layer):
        return _pyfx.LayerSuite_GetTrackMatteLayer(self, layer)

    def SetTrackMatte(self, layer, trackMatteLayer, trackMatteType):
        return _pyfx.LayerSuite_SetTrackMatte(self, layer, trackMatteLayer, trackMatteType)

    def RemoveTrackMatte(self, layer):
        return _pyfx.LayerSuite_RemoveTrackMatte(self, layer)
    __swig_destroy__ = _pyfx.delete_LayerSuite

# Register LayerSuite in _pyfx:
_pyfx.LayerSuite_swigregister(LayerSuite)
class StreamSuite(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _pyfx.StreamSuite_swiginit(self, _pyfx.new_StreamSuite())

    def IsStreamLegal(self, layer, whichStream):
        return _pyfx.StreamSuite_IsStreamLegal(self, layer, whichStream)

    def CanVaryOverTime(self, stream):
        return _pyfx.StreamSuite_CanVaryOverTime(self, stream)

    def GetValidInterpolations(self, stream):
        return _pyfx.StreamSuite_GetValidInterpolations(self, stream)

    def GetNewLayerStream(self, layer, whichStream):
        return _pyfx.StreamSuite_GetNewLayerStream(self, layer, whichStream)

    def GetEffectNumParamStreams(self, effectRef):
        return _pyfx.StreamSuite_GetEffectNumParamStreams(self, effectRef)

    def GetNewEffectStreamByIndex(self, effectRef, paramIndex):
        return _pyfx.StreamSuite_GetNewEffectStreamByIndex(self, effectRef, paramIndex)

    def GetNewMaskStream(self, maskRef, whichStream):
        return _pyfx.StreamSuite_GetNewMaskStream(self, maskRef, whichStream)

    def GetStreamName(self, stream, forceEnglish):
        return _pyfx.StreamSuite_GetStreamName(self, stream, forceEnglish)

    def GetStreamUnitsText(self, stream, forceEnglish):
        return _pyfx.StreamSuite_GetStreamUnitsText(self, stream, forceEnglish)

    def GetStreamProperties(self, stream):
        return _pyfx.StreamSuite_GetStreamProperties(self, stream)

    def IsStreamTimevarying(self, stream):
        return _pyfx.StreamSuite_IsStreamTimevarying(self, stream)

    def GetStreamType(self, stream):
        return _pyfx.StreamSuite_GetStreamType(self, stream)

    def GetNewStreamValue(self, stream, timeMode, time, preExpression):
        return _pyfx.StreamSuite_GetNewStreamValue(self, stream, timeMode, time, preExpression)

    def SetStreamValue(self, stream, value):
        return _pyfx.StreamSuite_SetStreamValue(self, stream, value)

    def GetLayerStreamValue(self, layer, whichStream, timeMode, time, preExpression):
        return _pyfx.StreamSuite_GetLayerStreamValue(self, layer, whichStream, timeMode, time, preExpression)

    def DuplicateStreamRef(self, stream):
        return _pyfx.StreamSuite_DuplicateStreamRef(self, stream)

    def GetUniqueStreamID(self, stream):
        return _pyfx.StreamSuite_GetUniqueStreamID(self, stream)
    __swig_destroy__ = _pyfx.delete_StreamSuite

# Register StreamSuite in _pyfx:
_pyfx.StreamSuite_swigregister(StreamSuite)
class DynamicStreamSuite(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _pyfx.DynamicStreamSuite_swiginit(self, _pyfx.new_DynamicStreamSuite())

    def GetNewStreamRefForLayer(self, layer):
        return _pyfx.DynamicStreamSuite_GetNewStreamRefForLayer(self, layer)

    def GetNewStreamRefForMask(self, mask):
        return _pyfx.DynamicStreamSuite_GetNewStreamRefForMask(self, mask)

    def GetStreamDepth(self, stream):
        return _pyfx.DynamicStreamSuite_GetStreamDepth(self, stream)

    def GetStreamGroupingType(self, stream):
        return _pyfx.DynamicStreamSuite_GetStreamGroupingType(self, stream)

    def GetNumStreamsInGroup(self, stream):
        return _pyfx.DynamicStreamSuite_GetNumStreamsInGroup(self, stream)

    def GetDynamicStreamFlags(self, stream):
        return _pyfx.DynamicStreamSuite_GetDynamicStreamFlags(self, stream)

    def SetDynamicStreamFlag(self, stream, oneFlag, undoable, set):
        return _pyfx.DynamicStreamSuite_SetDynamicStreamFlag(self, stream, oneFlag, undoable, set)

    def GetNewStreamRefByIndex(self, parentGroup, index):
        return _pyfx.DynamicStreamSuite_GetNewStreamRefByIndex(self, parentGroup, index)

    def GetNewStreamRefByMatchname(self, parentGroup, matchName):
        return _pyfx.DynamicStreamSuite_GetNewStreamRefByMatchname(self, parentGroup, matchName)

    def DeleteStream(self, stream):
        return _pyfx.DynamicStreamSuite_DeleteStream(self, stream)

    def ReorderStream(self, stream, newIndex):
        return _pyfx.DynamicStreamSuite_ReorderStream(self, stream, newIndex)

    def DuplicateStream(self, stream):
        return _pyfx.DynamicStreamSuite_DuplicateStream(self, stream)

    def SetStreamName(self, stream, newName):
        return _pyfx.DynamicStreamSuite_SetStreamName(self, stream, newName)

    def CanAddStream(self, parentGroup, matchName):
        return _pyfx.DynamicStreamSuite_CanAddStream(self, parentGroup, matchName)

    def AddStream(self, parentGroup, matchName):
        return _pyfx.DynamicStreamSuite_AddStream(self, parentGroup, matchName)

    def GetMatchname(self, stream):
        return _pyfx.DynamicStreamSuite_GetMatchname(self, stream)

    def GetNewParentStreamRef(self, stream):
        return _pyfx.DynamicStreamSuite_GetNewParentStreamRef(self, stream)

    def GetStreamIsModified(self, stream):
        return _pyfx.DynamicStreamSuite_GetStreamIsModified(self, stream)

    def IsSeparationLeader(self, stream):
        return _pyfx.DynamicStreamSuite_IsSeparationLeader(self, stream)

    def AreDimensionsSeparated(self, leaderStream):
        return _pyfx.DynamicStreamSuite_AreDimensionsSeparated(self, leaderStream)

    def SetDimensionsSeparated(self, leaderStream, separated):
        return _pyfx.DynamicStreamSuite_SetDimensionsSeparated(self, leaderStream, separated)

    def GetSeparationFollower(self, dimension, leaderStream):
        return _pyfx.DynamicStreamSuite_GetSeparationFollower(self, dimension, leaderStream)

    def IsSeparationFollower(self, stream):
        return _pyfx.DynamicStreamSuite_IsSeparationFollower(self, stream)

    def GetSeparationLeader(self, followerStream):
        return _pyfx.DynamicStreamSuite_GetSeparationLeader(self, followerStream)

    def GetSeparationDimension(self, stream):
        return _pyfx.DynamicStreamSuite_GetSeparationDimension(self, stream)
    __swig_destroy__ = _pyfx.delete_DynamicStreamSuite

# Register DynamicStreamSuite in _pyfx:
_pyfx.DynamicStreamSuite_swigregister(DynamicStreamSuite)
class KeyframeSuite(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _pyfx.KeyframeSuite_swiginit(self, _pyfx.new_KeyframeSuite())

    def GetStreamNumKFs(self, stream):
        return _pyfx.KeyframeSuite_GetStreamNumKFs(self, stream)

    def GetKeyframeTime(self, stream, keyIndex, timeMode):
        return _pyfx.KeyframeSuite_GetKeyframeTime(self, stream, keyIndex, timeMode)

    def InsertKeyframe(self, stream, timeMode, time):
        return _pyfx.KeyframeSuite_InsertKeyframe(self, stream, timeMode, time)

    def DeleteKeyframe(self, stream, keyIndex):
        return _pyfx.KeyframeSuite_DeleteKeyframe(self, stream, keyIndex)

    def GetNewKeyframeValue(self, stream, keyIndex):
        return _pyfx.KeyframeSuite_GetNewKeyframeValue(self, stream, keyIndex)

    def SetKeyframeValue(self, stream, keyIndex, value):
        return _pyfx.KeyframeSuite_SetKeyframeValue(self, stream, keyIndex, value)

    def GetStreamValueDimensionality(self, stream):
        return _pyfx.KeyframeSuite_GetStreamValueDimensionality(self, stream)

    def GetStreamTemporalDimensionality(self, stream):
        return _pyfx.KeyframeSuite_GetStreamTemporalDimensionality(self, stream)

    def GetNewKeyframeSpatialTangents(self, stream, keyIndex):
        return _pyfx.KeyframeSuite_GetNewKeyframeSpatialTangents(self, stream, keyIndex)

    def SetKeyframeSpatialTangents(self, stream, keyIndex, inTan, outTan):
        return _pyfx.KeyframeSuite_SetKeyframeSpatialTangents(self, stream, keyIndex, inTan, outTan)

    def GetKeyframeTemporalEase(self, stream, keyIndex, dimension):
        return _pyfx.KeyframeSuite_GetKeyframeTemporalEase(self, stream, keyIndex, dimension)

    def SetKeyframeTemporalEase(self, stream, keyIndex, dimension, inEase, outEase):
        return _pyfx.KeyframeSuite_SetKeyframeTemporalEase(self, stream, keyIndex, dimension, inEase, outEase)

    def GetKeyframeFlags(self, stream, keyIndex):
        return _pyfx.KeyframeSuite_GetKeyframeFlags(self, stream, keyIndex)

    def SetKeyframeFlag(self, stream, keyIndex, flag, value):
        return _pyfx.KeyframeSuite_SetKeyframeFlag(self, stream, keyIndex, flag, value)

    def GetKeyframeInterpolation(self, stream, keyIndex):
        return _pyfx.KeyframeSuite_GetKeyframeInterpolation(self, stream, keyIndex)

    def SetKeyframeInterpolation(self, stream, keyIndex, inInterp, outInterp):
        return _pyfx.KeyframeSuite_SetKeyframeInterpolation(self, stream, keyIndex, inInterp, outInterp)

    def StartAddKeyframes(self, stream):
        return _pyfx.KeyframeSuite_StartAddKeyframes(self, stream)

    def AddKeyframes(self, akH, timeMode, time):
        return _pyfx.KeyframeSuite_AddKeyframes(self, akH, timeMode, time)

    def SetAddKeyframe(self, akH, keyIndex, value):
        return _pyfx.KeyframeSuite_SetAddKeyframe(self, akH, keyIndex, value)

    def EndAddKeyframes(self, akH):
        return _pyfx.KeyframeSuite_EndAddKeyframes(self, akH)

    def GetKeyframeLabelColorIndex(self, stream, keyIndex):
        return _pyfx.KeyframeSuite_GetKeyframeLabelColorIndex(self, stream, keyIndex)

    def SetKeyframeLabelColorIndex(self, stream, keyIndex, keyLabel):
        return _pyfx.KeyframeSuite_SetKeyframeLabelColorIndex(self, stream, keyIndex, keyLabel)
    __swig_destroy__ = _pyfx.delete_KeyframeSuite

# Register KeyframeSuite in _pyfx:
_pyfx.KeyframeSuite_swigregister(KeyframeSuite)
class TextDocumentSuite(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _pyfx.TextDocumentSuite_swiginit(self, _pyfx.new_TextDocumentSuite())

    def getNewText(self, text_documentH):
        return _pyfx.TextDocumentSuite_getNewText(self, text_documentH)

    def setText(self, text_documentH, unicodePS):
        return _pyfx.TextDocumentSuite_setText(self, text_documentH, unicodePS)
    __swig_destroy__ = _pyfx.delete_TextDocumentSuite

# Register TextDocumentSuite in _pyfx:
_pyfx.TextDocumentSuite_swigregister(TextDocumentSuite)
class MarkerSuite(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _pyfx.MarkerSuite_swiginit(self, _pyfx.new_MarkerSuite())

    def getNewMarker(self):
        return _pyfx.MarkerSuite_getNewMarker(self)

    def duplicateMarker(self, markerP):
        return _pyfx.MarkerSuite_duplicateMarker(self, markerP)

    def setMarkerFlag(self, markerP, flagType, valueB):
        return _pyfx.MarkerSuite_setMarkerFlag(self, markerP, flagType, valueB)

    def getMarkerFlag(self, markerP, flagType):
        return _pyfx.MarkerSuite_getMarkerFlag(self, markerP, flagType)

    def getMarkerString(self, markerP, strType):
        return _pyfx.MarkerSuite_getMarkerString(self, markerP, strType)

    def setMarkerString(self, markerP, strType, unicodeP):
        return _pyfx.MarkerSuite_setMarkerString(self, markerP, strType, unicodeP)

    def countCuePointParams(self, markerP):
        return _pyfx.MarkerSuite_countCuePointParams(self, markerP)

    def getIndCuePointParam(self, markerP, param_indexL):
        return _pyfx.MarkerSuite_getIndCuePointParam(self, markerP, param_indexL)

    def setIndCuePointParam(self, markerP, param_indexL, unicodeKeyP, unicodeValueP):
        return _pyfx.MarkerSuite_setIndCuePointParam(self, markerP, param_indexL, unicodeKeyP, unicodeValueP)

    def insertCuePointParam(self, markerP, param_indexL):
        return _pyfx.MarkerSuite_insertCuePointParam(self, markerP, param_indexL)

    def deleteIndCuePointParam(self, markerP, param_indexL):
        return _pyfx.MarkerSuite_deleteIndCuePointParam(self, markerP, param_indexL)

    def setMarkerDuration(self, markerP, durationPT):
        return _pyfx.MarkerSuite_setMarkerDuration(self, markerP, durationPT)

    def getMarkerDuration(self, markerP):
        return _pyfx.MarkerSuite_getMarkerDuration(self, markerP)

    def setMarkerLabel(self, markerP, value):
        return _pyfx.MarkerSuite_setMarkerLabel(self, markerP, value)

    def getMarkerLabel(self, markerP):
        return _pyfx.MarkerSuite_getMarkerLabel(self, markerP)
    __swig_destroy__ = _pyfx.delete_MarkerSuite

# Register MarkerSuite in _pyfx:
_pyfx.MarkerSuite_swigregister(MarkerSuite)
class TextLayerSuite(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _pyfx.TextLayerSuite_swiginit(self, _pyfx.new_TextLayerSuite())

    def getNewTextOutlines(self, layer, layer_time):
        return _pyfx.TextLayerSuite_getNewTextOutlines(self, layer, layer_time)

    def getNumTextOutlines(self, outlines):
        return _pyfx.TextLayerSuite_getNumTextOutlines(self, outlines)

    def getIndexedTextOutline(self, outlines, path_index):
        return _pyfx.TextLayerSuite_getIndexedTextOutline(self, outlines, path_index)
    __swig_destroy__ = _pyfx.delete_TextLayerSuite

# Register TextLayerSuite in _pyfx:
_pyfx.TextLayerSuite_swigregister(TextLayerSuite)
class EffectSuite(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _pyfx.EffectSuite_swiginit(self, _pyfx.new_EffectSuite())

    def getLayerNumEffects(self, layer):
        return _pyfx.EffectSuite_getLayerNumEffects(self, layer)

    def getLayerEffectByIndex(self, layer, layer_effect_index):
        return _pyfx.EffectSuite_getLayerEffectByIndex(self, layer, layer_effect_index)

    def getInstalledKeyFromLayerEffect(self, effect_ref):
        return _pyfx.EffectSuite_getInstalledKeyFromLayerEffect(self, effect_ref)

    def getEffectParamUnionByIndex(self, effect_ref, param_index):
        return _pyfx.EffectSuite_getEffectParamUnionByIndex(self, effect_ref, param_index)

    def getEffectFlags(self, effect_ref):
        return _pyfx.EffectSuite_getEffectFlags(self, effect_ref)

    def setEffectFlags(self, effect_ref, effect_flags_set_mask, effect_flags):
        return _pyfx.EffectSuite_setEffectFlags(self, effect_ref, effect_flags_set_mask, effect_flags)

    def reorderEffect(self, effect_ref, effect_index):
        return _pyfx.EffectSuite_reorderEffect(self, effect_ref, effect_index)

    def effectCallGeneric(self, effect_ref, timePT, effect_cmd, effect_extraPV):
        return _pyfx.EffectSuite_effectCallGeneric(self, effect_ref, timePT, effect_cmd, effect_extraPV)

    def applyEffect(self, layer, installed_effect_key):
        return _pyfx.EffectSuite_applyEffect(self, layer, installed_effect_key)

    def deleteLayerEffect(self, effect_ref):
        return _pyfx.EffectSuite_deleteLayerEffect(self, effect_ref)

    def getNumInstalledEffects(self):
        return _pyfx.EffectSuite_getNumInstalledEffects(self)

    def getNextInstalledEffect(self, installed_effect_key):
        return _pyfx.EffectSuite_getNextInstalledEffect(self, installed_effect_key)

    def getEffectName(self, installed_effect_key):
        return _pyfx.EffectSuite_getEffectName(self, installed_effect_key)

    def getEffectMatchName(self, installed_effect_key):
        return _pyfx.EffectSuite_getEffectMatchName(self, installed_effect_key)

    def getEffectCategory(self, installed_effect_key):
        return _pyfx.EffectSuite_getEffectCategory(self, installed_effect_key)

    def duplicateEffect(self, original_effect_ref):
        return _pyfx.EffectSuite_duplicateEffect(self, original_effect_ref)

    def numEffectMask(self, effect_ref):
        return _pyfx.EffectSuite_numEffectMask(self, effect_ref)

    def getEffectMaskID(self, effect_ref, mask_indexL):
        return _pyfx.EffectSuite_getEffectMaskID(self, effect_ref, mask_indexL)

    def addEffectMask(self, effect_ref, id_val):
        return _pyfx.EffectSuite_addEffectMask(self, effect_ref, id_val)

    def removeEffectMask(self, effect_ref, id_val):
        return _pyfx.EffectSuite_removeEffectMask(self, effect_ref, id_val)

    def setEffectMask(self, effect_ref, mask_indexL, id_val):
        return _pyfx.EffectSuite_setEffectMask(self, effect_ref, mask_indexL, id_val)
    __swig_destroy__ = _pyfx.delete_EffectSuite

# Register EffectSuite in _pyfx:
_pyfx.EffectSuite_swigregister(EffectSuite)
class MaskSuite(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _pyfx.MaskSuite_swiginit(self, _pyfx.new_MaskSuite())

    def getLayerNumMasks(self, aegp_layerH):
        return _pyfx.MaskSuite_getLayerNumMasks(self, aegp_layerH)

    def getLayerMaskByIndex(self, aegp_layerH, mask_indexL):
        return _pyfx.MaskSuite_getLayerMaskByIndex(self, aegp_layerH, mask_indexL)

    def getMaskInvert(self, mask_refH):
        return _pyfx.MaskSuite_getMaskInvert(self, mask_refH)

    def setMaskInvert(self, mask_refH, invertB):
        return _pyfx.MaskSuite_setMaskInvert(self, mask_refH, invertB)

    def getMaskMode(self, mask_refH):
        return _pyfx.MaskSuite_getMaskMode(self, mask_refH)

    def setMaskMode(self, maskH, mode):
        return _pyfx.MaskSuite_setMaskMode(self, maskH, mode)

    def getMaskMotionBlurState(self, mask_refH):
        return _pyfx.MaskSuite_getMaskMotionBlurState(self, mask_refH)

    def setMaskMotionBlurState(self, mask_refH, blur_state):
        return _pyfx.MaskSuite_setMaskMotionBlurState(self, mask_refH, blur_state)

    def getMaskFeatherFalloff(self, mask_refH):
        return _pyfx.MaskSuite_getMaskFeatherFalloff(self, mask_refH)

    def setMaskFeatherFalloff(self, mask_refH, feather_falloffP):
        return _pyfx.MaskSuite_setMaskFeatherFalloff(self, mask_refH, feather_falloffP)

    def getMaskID(self, mask_refH):
        return _pyfx.MaskSuite_getMaskID(self, mask_refH)

    def createNewMask(self, layerH, mask_indexPL0):
        return _pyfx.MaskSuite_createNewMask(self, layerH, mask_indexPL0)

    def deleteMaskFromLayer(self, mask_refH):
        return _pyfx.MaskSuite_deleteMaskFromLayer(self, mask_refH)

    def getMaskColor(self, mask_refH):
        return _pyfx.MaskSuite_getMaskColor(self, mask_refH)

    def setMaskColor(self, mask_refH, colorP):
        return _pyfx.MaskSuite_setMaskColor(self, mask_refH, colorP)

    def getMaskLockState(self, mask_refH):
        return _pyfx.MaskSuite_getMaskLockState(self, mask_refH)

    def setMaskLockState(self, mask_refH, lockB):
        return _pyfx.MaskSuite_setMaskLockState(self, mask_refH, lockB)

    def getMaskIsRotoBezier(self, mask_refH):
        return _pyfx.MaskSuite_getMaskIsRotoBezier(self, mask_refH)

    def setMaskIsRotoBezier(self, mask_refH, is_roto_bezierB):
        return _pyfx.MaskSuite_setMaskIsRotoBezier(self, mask_refH, is_roto_bezierB)

    def duplicateMask(self, orig_mask_refH):
        return _pyfx.MaskSuite_duplicateMask(self, orig_mask_refH)
    __swig_destroy__ = _pyfx.delete_MaskSuite

# Register MaskSuite in _pyfx:
_pyfx.MaskSuite_swigregister(MaskSuite)
class MaskOutlineSuite(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _pyfx.MaskOutlineSuite_swiginit(self, _pyfx.new_MaskOutlineSuite())

    def isMaskOutlineOpen(self, mask_outlineH):
        return _pyfx.MaskOutlineSuite_isMaskOutlineOpen(self, mask_outlineH)

    def setMaskOutlineOpen(self, mask_outlineH, openB):
        return _pyfx.MaskOutlineSuite_setMaskOutlineOpen(self, mask_outlineH, openB)

    def getMaskOutlineNumSegments(self, mask_outlineH):
        return _pyfx.MaskOutlineSuite_getMaskOutlineNumSegments(self, mask_outlineH)

    def getMaskOutlineVertexInfo(self, mask_outlineH, which_pointL):
        return _pyfx.MaskOutlineSuite_getMaskOutlineVertexInfo(self, mask_outlineH, which_pointL)

    def setMaskOutlineVertexInfo(self, mask_outlineH, which_pointL, vertexP):
        return _pyfx.MaskOutlineSuite_setMaskOutlineVertexInfo(self, mask_outlineH, which_pointL, vertexP)

    def createVertex(self, mask_outlineH, insert_position):
        return _pyfx.MaskOutlineSuite_createVertex(self, mask_outlineH, insert_position)

    def deleteVertex(self, mask_outlineH, index):
        return _pyfx.MaskOutlineSuite_deleteVertex(self, mask_outlineH, index)

    def getMaskOutlineNumFeathers(self, mask_outlineH):
        return _pyfx.MaskOutlineSuite_getMaskOutlineNumFeathers(self, mask_outlineH)

    def getMaskOutlineFeatherInfo(self, mask_outlineH, which_featherL):
        return _pyfx.MaskOutlineSuite_getMaskOutlineFeatherInfo(self, mask_outlineH, which_featherL)

    def setMaskOutlineFeatherInfo(self, mask_outlineH, which_featherL, featherP):
        return _pyfx.MaskOutlineSuite_setMaskOutlineFeatherInfo(self, mask_outlineH, which_featherL, featherP)

    def createMaskOutlineFeather(self, mask_outlineH, featherP0):
        return _pyfx.MaskOutlineSuite_createMaskOutlineFeather(self, mask_outlineH, featherP0)

    def deleteMaskOutlineFeather(self, mask_outlineH, index):
        return _pyfx.MaskOutlineSuite_deleteMaskOutlineFeather(self, mask_outlineH, index)
    __swig_destroy__ = _pyfx.delete_MaskOutlineSuite

# Register MaskOutlineSuite in _pyfx:
_pyfx.MaskOutlineSuite_swigregister(MaskOutlineSuite)
class FootageSuite(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _pyfx.FootageSuite_swiginit(self, _pyfx.new_FootageSuite())

    def getMainFootageFromItem(self, itemH):
        return _pyfx.FootageSuite_getMainFootageFromItem(self, itemH)

    def getProxyFootageFromItem(self, itemH):
        return _pyfx.FootageSuite_getProxyFootageFromItem(self, itemH)

    def getFootageNumFiles(self, footageH):
        return _pyfx.FootageSuite_getFootageNumFiles(self, footageH)

    def getFootagePath(self, footageH, frame_numL, file_indexL):
        return _pyfx.FootageSuite_getFootagePath(self, footageH, frame_numL, file_indexL)

    def getFootageSignature(self, footageH):
        return _pyfx.FootageSuite_getFootageSignature(self, footageH)

    def newFootage(self, pathZ, layer_infoP0, sequence_optionsP0, interp_style):
        return _pyfx.FootageSuite_newFootage(self, pathZ, layer_infoP0, sequence_optionsP0, interp_style)

    def addFootageToProject(self, footageH, folderH):
        return _pyfx.FootageSuite_addFootageToProject(self, footageH, folderH)

    def setItemProxyFootage(self, footageH, itemH):
        return _pyfx.FootageSuite_setItemProxyFootage(self, footageH, itemH)

    def replaceItemMainFootage(self, footageH, itemH):
        return _pyfx.FootageSuite_replaceItemMainFootage(self, footageH, itemH)

    def getFootageInterpretation(self, itemH, proxyB):
        return _pyfx.FootageSuite_getFootageInterpretation(self, itemH, proxyB)

    def setFootageInterpretation(self, itemH, proxyB, interpP):
        return _pyfx.FootageSuite_setFootageInterpretation(self, itemH, proxyB, interpP)

    def getFootageLayerKey(self, footageH):
        return _pyfx.FootageSuite_getFootageLayerKey(self, footageH)

    def newPlaceholderFootage(self, nameZ, width, height, durationPT):
        return _pyfx.FootageSuite_newPlaceholderFootage(self, nameZ, width, height, durationPT)

    def newPlaceholderFootageWithPath(self, pathZ, path_platform, file_type, widthL, heightL, durationPT):
        return _pyfx.FootageSuite_newPlaceholderFootageWithPath(self, pathZ, path_platform, file_type, widthL, heightL, durationPT)

    def newSolidFootage(self, nameZ, width, height, colorP):
        return _pyfx.FootageSuite_newSolidFootage(self, nameZ, width, height, colorP)

    def getSolidFootageColor(self, itemH, proxyB):
        return _pyfx.FootageSuite_getSolidFootageColor(self, itemH, proxyB)

    def setSolidFootageColor(self, itemH, proxyB, colorP):
        return _pyfx.FootageSuite_setSolidFootageColor(self, itemH, proxyB, colorP)

    def setSolidFootageDimensions(self, itemH, proxyB, widthL, heightL):
        return _pyfx.FootageSuite_setSolidFootageDimensions(self, itemH, proxyB, widthL, heightL)

    def getFootageSoundDataFormat(self, footageH):
        return _pyfx.FootageSuite_getFootageSoundDataFormat(self, footageH)

    def getFootageSequenceImportOptions(self, footageH):
        return _pyfx.FootageSuite_getFootageSequenceImportOptions(self, footageH)
    __swig_destroy__ = _pyfx.delete_FootageSuite

# Register FootageSuite in _pyfx:
_pyfx.FootageSuite_swigregister(FootageSuite)
class UtilitySuite(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _pyfx.UtilitySuite_swiginit(self, _pyfx.new_UtilitySuite())

    def reportInfo(self, info_string):
        return _pyfx.UtilitySuite_reportInfo(self, info_string)

    def reportInfoUnicode(self, info_string):
        return _pyfx.UtilitySuite_reportInfoUnicode(self, info_string)

    def getDriverPluginInitFuncVersion(self):
        return _pyfx.UtilitySuite_getDriverPluginInitFuncVersion(self)

    def getDriverImplementationVersion(self):
        return _pyfx.UtilitySuite_getDriverImplementationVersion(self)

    def startQuietErrors(self):
        return _pyfx.UtilitySuite_startQuietErrors(self)

    def endQuietErrors(self, report_quieted_errorsB):
        return _pyfx.UtilitySuite_endQuietErrors(self, report_quieted_errorsB)

    def getLastErrorMessage(self, buffer_size):
        return _pyfx.UtilitySuite_getLastErrorMessage(self, buffer_size)

    def startUndoGroup(self, undo_name):
        return _pyfx.UtilitySuite_startUndoGroup(self, undo_name)

    def endUndoGroup(self):
        return _pyfx.UtilitySuite_endUndoGroup(self)

    def getMainHWND(self):
        return _pyfx.UtilitySuite_getMainHWND(self)

    def showHideAllFloaters(self, include_tool_palB):
        return _pyfx.UtilitySuite_showHideAllFloaters(self, include_tool_palB)

    def getPaintPalForeColor(self):
        return _pyfx.UtilitySuite_getPaintPalForeColor(self)

    def getPaintPalBackColor(self):
        return _pyfx.UtilitySuite_getPaintPalBackColor(self)

    def setPaintPalForeColor(self, fore_color):
        return _pyfx.UtilitySuite_setPaintPalForeColor(self, fore_color)

    def setPaintPalBackColor(self, back_color):
        return _pyfx.UtilitySuite_setPaintPalBackColor(self, back_color)

    def getCharPalFillColor(self):
        return _pyfx.UtilitySuite_getCharPalFillColor(self)

    def getCharPalStrokeColor(self):
        return _pyfx.UtilitySuite_getCharPalStrokeColor(self)

    def setCharPalFillColor(self, fill_color):
        return _pyfx.UtilitySuite_setCharPalFillColor(self, fill_color)

    def setCharPalStrokeColor(self, stroke_color):
        return _pyfx.UtilitySuite_setCharPalStrokeColor(self, stroke_color)

    def charPalIsFillColorUIFrontmost(self):
        return _pyfx.UtilitySuite_charPalIsFillColorUIFrontmost(self)

    def convertFpLongToHSFRatio(self, numberF):
        return _pyfx.UtilitySuite_convertFpLongToHSFRatio(self, numberF)

    def convertHSFRatioToFpLong(self, ratioR):
        return _pyfx.UtilitySuite_convertHSFRatioToFpLong(self, ratioR)

    def causeIdleRoutinesToBeCalled(self):
        return _pyfx.UtilitySuite_causeIdleRoutinesToBeCalled(self)

    def getSuppressInteractiveUI(self):
        return _pyfx.UtilitySuite_getSuppressInteractiveUI(self)

    def writeToOSConsole(self, text):
        return _pyfx.UtilitySuite_writeToOSConsole(self, text)

    def writeToDebugLog(self, subsystem, eventType, text):
        return _pyfx.UtilitySuite_writeToDebugLog(self, subsystem, eventType, text)

    def getPluginPath(self, path_type):
        return _pyfx.UtilitySuite_getPluginPath(self, path_type)
    __swig_destroy__ = _pyfx.delete_UtilitySuite

# Register UtilitySuite in _pyfx:
_pyfx.UtilitySuite_swigregister(UtilitySuite)
class RenderQueueSuite(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _pyfx.RenderQueueSuite_swiginit(self, _pyfx.new_RenderQueueSuite())

    def addCompToRenderQueue(self, comp, path):
        return _pyfx.RenderQueueSuite_addCompToRenderQueue(self, comp, path)

    def setRenderQueueState(self, state):
        return _pyfx.RenderQueueSuite_setRenderQueueState(self, state)

    def getRenderQueueState(self):
        return _pyfx.RenderQueueSuite_getRenderQueueState(self)
    __swig_destroy__ = _pyfx.delete_RenderQueueSuite

# Register RenderQueueSuite in _pyfx:
_pyfx.RenderQueueSuite_swigregister(RenderQueueSuite)
class RenderQueueItemSuite(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _pyfx.RenderQueueItemSuite_swiginit(self, _pyfx.new_RenderQueueItemSuite())

    def getNumRQItems(self):
        return _pyfx.RenderQueueItemSuite_getNumRQItems(self)

    def getRQItemByIndex(self, rq_item_index):
        return _pyfx.RenderQueueItemSuite_getRQItemByIndex(self, rq_item_index)

    def getNextRQItem(self, current_rq_item):
        return _pyfx.RenderQueueItemSuite_getNextRQItem(self, current_rq_item)

    def getNumOutputModulesForRQItem(self, rq_item):
        return _pyfx.RenderQueueItemSuite_getNumOutputModulesForRQItem(self, rq_item)

    def getRenderState(self, rq_item):
        return _pyfx.RenderQueueItemSuite_getRenderState(self, rq_item)

    def setRenderState(self, rq_item, status):
        return _pyfx.RenderQueueItemSuite_setRenderState(self, rq_item, status)

    def getStartedTime(self, rq_item):
        return _pyfx.RenderQueueItemSuite_getStartedTime(self, rq_item)

    def getElapsedTime(self, rq_item):
        return _pyfx.RenderQueueItemSuite_getElapsedTime(self, rq_item)

    def getLogType(self, rq_item):
        return _pyfx.RenderQueueItemSuite_getLogType(self, rq_item)

    def setLogType(self, rq_item, logtype):
        return _pyfx.RenderQueueItemSuite_setLogType(self, rq_item, logtype)

    def removeOutputModule(self, rq_item, outmod):
        return _pyfx.RenderQueueItemSuite_removeOutputModule(self, rq_item, outmod)

    def getComment(self, rq_item):
        return _pyfx.RenderQueueItemSuite_getComment(self, rq_item)

    def setComment(self, rq_item, comment):
        return _pyfx.RenderQueueItemSuite_setComment(self, rq_item, comment)

    def getCompFromRQItem(self, rq_item):
        return _pyfx.RenderQueueItemSuite_getCompFromRQItem(self, rq_item)

    def deleteRQItem(self, rq_item):
        return _pyfx.RenderQueueItemSuite_deleteRQItem(self, rq_item)
    __swig_destroy__ = _pyfx.delete_RenderQueueItemSuite

# Register RenderQueueItemSuite in _pyfx:
_pyfx.RenderQueueItemSuite_swigregister(RenderQueueItemSuite)
class OutputModuleSuite(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _pyfx.OutputModuleSuite_swiginit(self, _pyfx.new_OutputModuleSuite())

    def getOutputModuleByIndex(self, rq_itemH, outmod_indexL):
        return _pyfx.OutputModuleSuite_getOutputModuleByIndex(self, rq_itemH, outmod_indexL)

    def getEmbedOptions(self, rq_itemH, outmodH):
        return _pyfx.OutputModuleSuite_getEmbedOptions(self, rq_itemH, outmodH)

    def setEmbedOptions(self, rq_itemH, outmodH, embed_options):
        return _pyfx.OutputModuleSuite_setEmbedOptions(self, rq_itemH, outmodH, embed_options)

    def getPostRenderAction(self, rq_itemH, outmodH):
        return _pyfx.OutputModuleSuite_getPostRenderAction(self, rq_itemH, outmodH)

    def setPostRenderAction(self, rq_itemH, outmodH, post_render_action):
        return _pyfx.OutputModuleSuite_setPostRenderAction(self, rq_itemH, outmodH, post_render_action)

    def getEnabledOutputs(self, rq_itemH, outmodH):
        return _pyfx.OutputModuleSuite_getEnabledOutputs(self, rq_itemH, outmodH)

    def setEnabledOutputs(self, rq_itemH, outmodH, enabled_types):
        return _pyfx.OutputModuleSuite_setEnabledOutputs(self, rq_itemH, outmodH, enabled_types)

    def getOutputChannels(self, rq_itemH, outmodH):
        return _pyfx.OutputModuleSuite_getOutputChannels(self, rq_itemH, outmodH)

    def setOutputChannels(self, rq_itemH, outmodH, output_channels):
        return _pyfx.OutputModuleSuite_setOutputChannels(self, rq_itemH, outmodH, output_channels)

    def getStretchInfo(self, rq_itemH, outmodH):
        return _pyfx.OutputModuleSuite_getStretchInfo(self, rq_itemH, outmodH)

    def setStretchInfo(self, rq_itemH, outmodH, is_enabledB, stretch_quality):
        return _pyfx.OutputModuleSuite_setStretchInfo(self, rq_itemH, outmodH, is_enabledB, stretch_quality)

    def getCropInfo(self, rq_itemH, outmodH):
        return _pyfx.OutputModuleSuite_getCropInfo(self, rq_itemH, outmodH)

    def setCropInfo(self, rq_itemH, outmodH, enableB, crop_rect):
        return _pyfx.OutputModuleSuite_setCropInfo(self, rq_itemH, outmodH, enableB, crop_rect)

    def getSoundFormatInfo(self, rq_itemH, outmodH):
        return _pyfx.OutputModuleSuite_getSoundFormatInfo(self, rq_itemH, outmodH)

    def setSoundFormatInfo(self, rq_itemH, outmodH, sound_format_info, audio_enabledB):
        return _pyfx.OutputModuleSuite_setSoundFormatInfo(self, rq_itemH, outmodH, sound_format_info, audio_enabledB)

    def getOutputFilePath(self, rq_itemH, outmodH):
        return _pyfx.OutputModuleSuite_getOutputFilePath(self, rq_itemH, outmodH)

    def setOutputFilePath(self, rq_itemH, outmodH, path):
        return _pyfx.OutputModuleSuite_setOutputFilePath(self, rq_itemH, outmodH, path)

    def addDefaultOutputModule(self, rq_itemH):
        return _pyfx.OutputModuleSuite_addDefaultOutputModule(self, rq_itemH)

    def getExtraOutputModuleInfo(self, rq_itemH, outmodH):
        return _pyfx.OutputModuleSuite_getExtraOutputModuleInfo(self, rq_itemH, outmodH)
    __swig_destroy__ = _pyfx.delete_OutputModuleSuite

# Register OutputModuleSuite in _pyfx:
_pyfx.OutputModuleSuite_swigregister(OutputModuleSuite)
class WorldSuite(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _pyfx.WorldSuite_swiginit(self, _pyfx.new_WorldSuite())

    def newWorld(self, type, widthL, heightL):
        return _pyfx.WorldSuite_newWorld(self, type, widthL, heightL)

    def getType(self, worldH):
        return _pyfx.WorldSuite_getType(self, worldH)

    def getSize(self, worldH):
        return _pyfx.WorldSuite_getSize(self, worldH)

    def getRowBytes(self, worldH):
        return _pyfx.WorldSuite_getRowBytes(self, worldH)

    def getBaseAddr8(self, worldH):
        return _pyfx.WorldSuite_getBaseAddr8(self, worldH)

    def getBaseAddr16(self, worldH):
        return _pyfx.WorldSuite_getBaseAddr16(self, worldH)

    def getBaseAddr32(self, worldH):
        return _pyfx.WorldSuite_getBaseAddr32(self, worldH)

    def fillOutPFEffectWorld(self, worldH):
        return _pyfx.WorldSuite_fillOutPFEffectWorld(self, worldH)

    def fastBlur(self, radiusF, mode, quality, worldH):
        return _pyfx.WorldSuite_fastBlur(self, radiusF, mode, quality, worldH)

    def newPlatformWorld(self, type, widthL, heightL):
        return _pyfx.WorldSuite_newPlatformWorld(self, type, widthL, heightL)

    def newReferenceFromPlatformWorld(self, platform_worldH):
        return _pyfx.WorldSuite_newReferenceFromPlatformWorld(self, platform_worldH)
    __swig_destroy__ = _pyfx.delete_WorldSuite

# Register WorldSuite in _pyfx:
_pyfx.WorldSuite_swigregister(WorldSuite)
class RenderOptionsSuite(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _pyfx.RenderOptionsSuite_swiginit(self, _pyfx.new_RenderOptionsSuite())

    def newFromItem(self, itemH):
        return _pyfx.RenderOptionsSuite_newFromItem(self, itemH)

    def duplicate(self, optionsH):
        return _pyfx.RenderOptionsSuite_duplicate(self, optionsH)

    def setTime(self, optionsH, time):
        return _pyfx.RenderOptionsSuite_setTime(self, optionsH, time)

    def getTime(self, optionsH):
        return _pyfx.RenderOptionsSuite_getTime(self, optionsH)

    def setTimeStep(self, optionsH, time_step):
        return _pyfx.RenderOptionsSuite_setTimeStep(self, optionsH, time_step)

    def getTimeStep(self, optionsH):
        return _pyfx.RenderOptionsSuite_getTimeStep(self, optionsH)

    def setFieldRender(self, optionsH, field_render):
        return _pyfx.RenderOptionsSuite_setFieldRender(self, optionsH, field_render)

    def getFieldRender(self, optionsH):
        return _pyfx.RenderOptionsSuite_getFieldRender(self, optionsH)

    def setWorldType(self, optionsH, type):
        return _pyfx.RenderOptionsSuite_setWorldType(self, optionsH, type)

    def getWorldType(self, optionsH):
        return _pyfx.RenderOptionsSuite_getWorldType(self, optionsH)

    def setDownsampleFactor(self, optionsH, downsample_factor):
        return _pyfx.RenderOptionsSuite_setDownsampleFactor(self, optionsH, downsample_factor)

    def getDownsampleFactor(self, optionsH):
        return _pyfx.RenderOptionsSuite_getDownsampleFactor(self, optionsH)

    def setRegionOfInterest(self, optionsH, roiP):
        return _pyfx.RenderOptionsSuite_setRegionOfInterest(self, optionsH, roiP)

    def getRegionOfInterest(self, optionsH):
        return _pyfx.RenderOptionsSuite_getRegionOfInterest(self, optionsH)

    def setMatteMode(self, optionsH, mode):
        return _pyfx.RenderOptionsSuite_setMatteMode(self, optionsH, mode)

    def getMatteMode(self, optionsH):
        return _pyfx.RenderOptionsSuite_getMatteMode(self, optionsH)

    def setChannelOrder(self, optionsH, channel_order):
        return _pyfx.RenderOptionsSuite_setChannelOrder(self, optionsH, channel_order)

    def getChannelOrder(self, optionsH):
        return _pyfx.RenderOptionsSuite_getChannelOrder(self, optionsH)

    def getRenderGuideLayers(self, optionsH):
        return _pyfx.RenderOptionsSuite_getRenderGuideLayers(self, optionsH)

    def setRenderGuideLayers(self, optionsH, render_themB):
        return _pyfx.RenderOptionsSuite_setRenderGuideLayers(self, optionsH, render_themB)
    __swig_destroy__ = _pyfx.delete_RenderOptionsSuite

# Register RenderOptionsSuite in _pyfx:
_pyfx.RenderOptionsSuite_swigregister(RenderOptionsSuite)
class LayerRenderOptionsSuite(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _pyfx.LayerRenderOptionsSuite_swiginit(self, _pyfx.new_LayerRenderOptionsSuite())

    def newFromLayer(self, layer):
        return _pyfx.LayerRenderOptionsSuite_newFromLayer(self, layer)

    def newFromUpstreamOfEffect(self, effect_ref):
        return _pyfx.LayerRenderOptionsSuite_newFromUpstreamOfEffect(self, effect_ref)

    def newFromDownstreamOfEffect(self, effect_ref):
        return _pyfx.LayerRenderOptionsSuite_newFromDownstreamOfEffect(self, effect_ref)

    def duplicate(self, optionsH):
        return _pyfx.LayerRenderOptionsSuite_duplicate(self, optionsH)

    def setTime(self, optionsH, time):
        return _pyfx.LayerRenderOptionsSuite_setTime(self, optionsH, time)

    def getTime(self, optionsH):
        return _pyfx.LayerRenderOptionsSuite_getTime(self, optionsH)

    def setTimeStep(self, optionsH, time_step):
        return _pyfx.LayerRenderOptionsSuite_setTimeStep(self, optionsH, time_step)

    def getTimeStep(self, optionsH):
        return _pyfx.LayerRenderOptionsSuite_getTimeStep(self, optionsH)

    def setWorldType(self, optionsH, type):
        return _pyfx.LayerRenderOptionsSuite_setWorldType(self, optionsH, type)

    def getWorldType(self, optionsH):
        return _pyfx.LayerRenderOptionsSuite_getWorldType(self, optionsH)

    def setDownsampleFactor(self, optionsH, dsf):
        return _pyfx.LayerRenderOptionsSuite_setDownsampleFactor(self, optionsH, dsf)

    def getDownsampleFactor(self, optionsH):
        return _pyfx.LayerRenderOptionsSuite_getDownsampleFactor(self, optionsH)

    def setMatteMode(self, optionsH, mode):
        return _pyfx.LayerRenderOptionsSuite_setMatteMode(self, optionsH, mode)

    def getMatteMode(self, optionsH):
        return _pyfx.LayerRenderOptionsSuite_getMatteMode(self, optionsH)
    __swig_destroy__ = _pyfx.delete_LayerRenderOptionsSuite

# Register LayerRenderOptionsSuite in _pyfx:
_pyfx.LayerRenderOptionsSuite_swigregister(LayerRenderOptionsSuite)
class RenderSuite(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _pyfx.RenderSuite_swiginit(self, _pyfx.new_RenderSuite())

    def renderAndCheckoutFrame(self, optionsH):
        return _pyfx.RenderSuite_renderAndCheckoutFrame(self, optionsH)

    def renderAndCheckoutLayerFrame(self, optionsH):
        return _pyfx.RenderSuite_renderAndCheckoutLayerFrame(self, optionsH)

    def renderAndCheckoutLayerFrameAsync(self, optionsH, callback, refcon):
        return _pyfx.RenderSuite_renderAndCheckoutLayerFrameAsync(self, optionsH, callback, refcon)

    def cancelAsyncRequest(self, async_request_id):
        return _pyfx.RenderSuite_cancelAsyncRequest(self, async_request_id)

    def getReceiptWorld(self, receiptH):
        return _pyfx.RenderSuite_getReceiptWorld(self, receiptH)

    def getRenderedRegion(self, receiptH):
        return _pyfx.RenderSuite_getRenderedRegion(self, receiptH)

    def isRenderedFrameSufficient(self, rendered_optionsH, proposed_optionsH):
        return _pyfx.RenderSuite_isRenderedFrameSufficient(self, rendered_optionsH, proposed_optionsH)

    def getCurrentTimestamp(self):
        return _pyfx.RenderSuite_getCurrentTimestamp(self)

    def hasItemChangedSinceTimestamp(self, itemH, start_timeP, durationP, time_stampP):
        return _pyfx.RenderSuite_hasItemChangedSinceTimestamp(self, itemH, start_timeP, durationP, time_stampP)

    def isItemWorthwhileToRender(self, roH, time_stampP):
        return _pyfx.RenderSuite_isItemWorthwhileToRender(self, roH, time_stampP)

    def checkinRenderedFrame(self, roH, time_stampP, ticks_to_renderL, imageH):
        return _pyfx.RenderSuite_checkinRenderedFrame(self, roH, time_stampP, ticks_to_renderL, imageH)

    def getReceiptGuid(self, receiptH):
        return _pyfx.RenderSuite_getReceiptGuid(self, receiptH)
    __swig_destroy__ = _pyfx.delete_RenderSuite

# Register RenderSuite in _pyfx:
_pyfx.RenderSuite_swigregister(RenderSuite)
class CollectionSuite(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _pyfx.CollectionSuite_swiginit(self, _pyfx.new_CollectionSuite())

    def newCollection(self):
        return _pyfx.CollectionSuite_newCollection(self)

    def getCollectionNumItems(self, collectionH):
        return _pyfx.CollectionSuite_getCollectionNumItems(self, collectionH)

    def getCollectionItemByIndex(self, collectionH, indexL):
        return _pyfx.CollectionSuite_getCollectionItemByIndex(self, collectionH, indexL)

    def collectionPushBack(self, collectionH, itemP):
        return _pyfx.CollectionSuite_collectionPushBack(self, collectionH, itemP)

    def collectionErase(self, collectionH, index_firstL, index_lastL):
        return _pyfx.CollectionSuite_collectionErase(self, collectionH, index_firstL, index_lastL)
    __swig_destroy__ = _pyfx.delete_CollectionSuite

# Register CollectionSuite in _pyfx:
_pyfx.CollectionSuite_swigregister(CollectionSuite)
class RegisterSuite(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _pyfx.RegisterSuite_swiginit(self, _pyfx.new_RegisterSuite())

    def registerCommandHook(self, hook_priority, command, command_hook_func, refconP):
        return _pyfx.RegisterSuite_registerCommandHook(self, hook_priority, command, command_hook_func, refconP)

    def registerUpdateMenuHook(self, update_menu_hook_func, refconP):
        return _pyfx.RegisterSuite_registerUpdateMenuHook(self, update_menu_hook_func, refconP)

    def registerDeathHook(self, death_hook_func, refconP):
        return _pyfx.RegisterSuite_registerDeathHook(self, death_hook_func, refconP)

    def registerIdleHook(self, idle_hook_func, refconP):
        return _pyfx.RegisterSuite_registerIdleHook(self, idle_hook_func, refconP)

    def registerPresetLocalizationString(self, english_nameZ, localized_nameZ):
        return _pyfx.RegisterSuite_registerPresetLocalizationString(self, english_nameZ, localized_nameZ)
    __swig_destroy__ = _pyfx.delete_RegisterSuite

# Register RegisterSuite in _pyfx:
_pyfx.RegisterSuite_swigregister(RegisterSuite)
class CommandSuite(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _pyfx.CommandSuite_swiginit(self, _pyfx.new_CommandSuite())

    def getUniqueCommand(self):
        return _pyfx.CommandSuite_getUniqueCommand(self)

    def insertMenuCommand(self, command, nameZ, menu_id, after_itemL):
        return _pyfx.CommandSuite_insertMenuCommand(self, command, nameZ, menu_id, after_itemL)

    def removeMenuCommand(self, command):
        return _pyfx.CommandSuite_removeMenuCommand(self, command)

    def setMenuCommandName(self, command, nameZ):
        return _pyfx.CommandSuite_setMenuCommandName(self, command, nameZ)

    def enableCommand(self, command):
        return _pyfx.CommandSuite_enableCommand(self, command)

    def disableCommand(self, command):
        return _pyfx.CommandSuite_disableCommand(self, command)

    def checkMarkMenuCommand(self, command, checkB):
        return _pyfx.CommandSuite_checkMarkMenuCommand(self, command, checkB)

    def doCommand(self, command):
        return _pyfx.CommandSuite_doCommand(self, command)
    __swig_destroy__ = _pyfx.delete_CommandSuite

# Register CommandSuite in _pyfx:
_pyfx.CommandSuite_swigregister(CommandSuite)

